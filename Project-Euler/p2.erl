
%% Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

%% 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

%% Find the sum of all the even-valued terms in the sequence which do not exceed four million.

%% LOGIC:
%% simple, get all the fib values and add those values which are divisible by 2
%% CATCH: 
%% 1. "which do not exceed four million" the value which do not exceed 4M, not the sum (so sum + fib(next) > 4M)
%% 2. even-valued terms are not the 2nd fourth term, but fib terms whose value is even

-module(p2).

-export([sum_of_even/0, sum_of_even_term/0]).

fib(_, _, N) when N =:= 0; N =:= 1 ->
    1;
fib(AA, BB, N) when N > 1 ->
    AA + BB.


%% forgot the 1st and 2nd catch
sum_of_even() ->
    X1 = fib(none, none, 0),
    X2 = fib(none, none, 1),
    sum_of_even(4000000, 0, 2, X1, X2). %% don't add X1 or X0 (Ques says from 1st term and 1 is odd)

sum_of_even(N, Sum, Cnt, X1, X2) ->
    X = fib(X1, X2, Cnt),
    if 
	Cnt rem 2 =:= 0, Sum + X =< N ->
	    io:format("~w, ~w, ~w~n",[Cnt, Sum+X, X]),
	    sum_of_even(N, Sum + X, Cnt + 1, X2, X);	
	Sum + X =< N ->
	    sum_of_even(N, Sum, Cnt + 1, X2, X);
	Sum + X > N ->
	    Sum
    end.


sum_of_even_term() ->
    X1 = fib(none, none, 0),
    X2 = fib(none, none, 1),
    sum_of_even_term(4000000, 0, 2, X1, X2). %% don't add X1 or X0 (Ques says from 1st term and 1 is odd)

sum_of_even_term(N, Sum, Cnt, X1, X2) ->
    X = fib(X1, X2, Cnt),
    if 
	X rem 2 =:= 0, Sum + X =< N ->
	    sum_of_even_term(N, Sum + X, Cnt + 1, X2, X);	
	Sum + X =< N ->
	    sum_of_even_term(N, Sum, Cnt + 1, X2, X);
	Sum + X > N ->
	    Sum + X
    end.
